#### Indices en MongoDB ###

-- 1

-- Inserción de Documentos de Ejemplo en la colección "orders":

db.orders.insertOne({
    "orderId": "ORD1001",
    "customerId": "CUST001",
    "orderDate": ISODate("2024-09-01T14:23:00Z"),
    "items": [
        {
            "productId": "PROD001",
            "quantity": 2,
            "price": 19.99
        },
        {
            "productId": "PROD002",
            "quantity": 1,
            "price": 39.99
        }
    ],
    "totalAmount": 79.97,
    "status": "processing"
});

db.orders.insertOne({
    "orderId": "ORD1002",
    "customerId": "CUST002",
    "orderDate": ISODate("2024-09-03T09:15:00Z"),
    "items": [
        {
            "productId": "PROD003",
            "quantity": 3,
            "price": 9.99
        },
        {
            "productId": "PROD004",
            "quantity": 1,
            "price": 29.99
        }
    ],
    "totalAmount": 59.96,
    "status": "shipped"
});

-- Consultas a evaluar

-- 1. Recupera todos los pedidos realizados por el cliente con customerId "CUST001":

db.orders.find({ "customerId": "CUST001" })

-- Indice Propuesto:

db.orders.createIndex({ customerId:1 });

-- 2. Recupera todos los pedidos, ordenados por la fecha de pedido en orden descendente (más reciente primero).

db.orders.find().sort({ "orderDate": -1 })

-- Indice Propuesto:

db.orders.createIndex({ orderDate:-1 });


-- 3. Filtra todos los pedidos que tienen el estado "shipped".

db.orders.find({ "status": "shipped" })

-- Indice Propuesto:

db.orders.createIndex({ status: 1 });

-- 4. Encuentra todos los pedidos que contienen el producto con productId "PROD001" en su lista de items.

db.orders.find({ "items.productId": "PROD001" })

-- Indice Propuesto:

db.orders.createIndex({ "items.productId": 1 });

-- 5 Recupera todos los pedidos realizados en septiembre de 2024 con un monto total superior a $50.

db.orders.find({
    "orderDate": { $gte: ISODate("2024-09-01T00:00:00Z"), $lte: ISODate("2024-09-30T23:59:59Z") },
    "totalAmount": { $gt: 50 }
})

-- Indice Propuesto:

db.orders.createIndex({ totalAmount: -1, orderDate: -1 });


-- 6 Recupera todos los pedidos de un cliente específico que tengan un estado determinado.

db.orders.find({
    "customerId": "CUST001",
    "status": "shipped"
})

-- Indice Propuesto:

db.orders.createIndex({ customerId: 1, status: 1 });

-- 7 Recupera las ventas de un producto en un rango de fechas específico.

db.sales.find({
    "productId": "PROD123",
    "saleDate": { $gte: ISODate("2024-01-01T00:00:00Z"), $lte: ISODate("2024-12-31T23:59:59Z") }
})

-- Indice Propuesto:

db.orders.createIndex({ customerId: 1, status: 1 });

-- 8 Recupera todos los pedidos de un cliente en un rango de fechas específico.

db.orders.find({
    "customerId": "CUST003",
    "orderDate": { $gte: ISODate("2024-08-01T00:00:00Z"), $lte: ISODate("2024-08-31T23:59:59Z") }
}).explain("executionStats");

-- Indice Propuesto:

db.orders.createIndex({ customerId: 1, orderDate: 1 });

-- 9 Recupera todos los pedidos que tienen un monto total superior a $100 y que fueron realizados por un cliente específico.

db.orders.find({
    "customerId": "CUST002",
    "totalAmount": { $gt: 100 }
}).explain();


-- Indice Propuesto:

db.orders.createIndex({ customerId: 1, totalAmount: -1 });



-- Casuística: Cuando se crea un indice por un campo específico y hay documentos que no poseen ese campo, también podrían ser indexados, lo que afectara el rendimiento.

Ej:
--------------------------------------------------------------
> db.coleccion.insert({"nombre": "cesar"})
> db.coleccion.insert({"nombre": "diego", "edad": "35"})
> db.coleccion.createIndex({"edad" : 1})
--------------------------------------------------------------

Para indexar un campo que no va a estar presente en todos los documentos de la colección, se puede hacer uso de "sparse" para que omita cualquier documento que no contenga el campo
indexado, y luego indicarselo explicitamente mediante "hint" para asegurar de que se indexe por el índice correcto:

--------------------------------------------------------------
> db.coleccion.createIndex({"edad" : 1}, {sparse: true})
--------------------------------------------------------------
--------------------------------------------------------------
> db.coleccion.find().sort({"edad": -1}).hint({"edad": 1})
--------------------------------------------------------------

De este modo se indexarian solo los documentos que se corresponden con el campo creado en el índice:

-- Resultado de la query:
--------------------------------------------------------------------------------------
"{ "_id" : ObjectId("56e8401b010d418cf416c326"), "nombre" : "diego", "edad" : "35" }"
--------------------------------------------------------------------------------------

######################################
#    Indices Compuestos Avanzados    #
######################################

-- 10 Queremos hacer una consulta que devuelva productos de la categoría Electrónica, que sean de la Marca A, cuyo precio esté entre $100 y $1000, 
y que tengan más de 20 unidades en stock. Además, queremos que los resultados estén ordenados por el campo ventas en orden descendente, y vamos a implementar una paginación 
(suponiendo que queremos los primeros 20 resultados de la página 1).

db.productos.find({
  "categoria": "Electrónica",
  "marca": "Marca A",
  "precio": { $gte: 100, $lte: 1000 },
  "stock": { $gt: 20 }
}).sort({ "ventas": -1 }).skip(0).limit(20);

-- Indice Propuesto:

db.productos.createIndex({categoria: 1, marca: 1, precio: 1, stock: 1, ventas: -1});

-- El orden en la creación de indices compuestos es determinante en cuanto a la eficiencia y rendimiento, a la hora de crear indices hay que tener en cuenta el orden de selectividad
   y analizar si se debe modificar el orden de los campos para priorizar otro que sea más selectivo ( posea mayor cantidad de valores únicos, y por tanto devuelve menos documentos ).
   Para este caso el volumen de datos no es considerablemente grande, y el rango de precios en la consulta (100 - 1000) no es tampoco excesivamente amplio, por lo que el indice propuesto para este caso
   debería ser apropiado.

######################################
#    Indices Multiclave    	     #
######################################

-- 1 Consulta que busca en la matriz "autores"

db.libros.find({ autores: "Gabriel García Márquez" });

-- Indice Propuesto:

db.libros.createIndex({autores: 1});

-- 2 Queremos hacer una consulta para encontrar todos los libros que tienen "Gabriel García Márquez" como autor y año.

db.libros.find({ anioPublicacion: 1985, autores: "Gabriel García Márquez" });

-- Indice Propuesto:

db.libros.createIndex({anioPublicacion: 1, autores: 1});

-- En este caso he determinado la creación de un indice compuesto que a su vez es multiclave al indexar un campo matriz que en este caso es "autores", priorizando el campo "anioPublicacion" para mayor selectividad.








